The ``1-my_list`` module
=============================

Using ``my_list``
--------------------

Importing the function frm the module:
        >>> MyList = __import__('1-my_list').MyList
        >>> my_list = MyList()

USIING
======

using simple test:
       >>> my_list.append(1)
       >>> my_list.append(4)
       >>> my_list.append(2)
       >>> my_list.append(3)
       >>> my_list.append(5)
       >>> print(my_list)
       [1, 4, 2, 3, 5]

       >>> my_list = MyList([4, 1, 5, 2, 3])
       >>> my_list.print_sorted()
       [1, 2, 3, 4, 5]

using methode:
       >>> my_list.print_sorted()
       [1, 2, 3, 4, 5]

using different order:
       >>> my_list = MyList()
       >>> my_list.append(9)
       >>> my_list.append(2)
       >>> my_list.append(1)
       >>> print(my_list)
       [9, 2, 1]

       >>> my_list.print_sorted()
       [1, 2, 9]

       >>> print(my_list)
       [9, 2, 1]

test with none:
       >>> my_list = MyList(None)
       Traceback (most recent call last):
        ...
       TypeError: 'NoneType' object is not iterable

test using more than argument:
       >>> my_list = MyList(5, 3)
       Traceback (most recent call last):
        ...
       TypeError: list expected at most 1 argument, got 2

using emty list:
       >>> my_list = MyList()
       >>> print(my_list)
       []
       >>> my_list.print_sorted()
       []

using different type:
       >>> my_list = MyList([1, "rmoe", "seleme", 4])
       >>> my_list.print_sorted()
       Traceback (most recent call last):
        ...
       TypeError: '<' not supported between instances of 'str' and 'int'

using list of string:
       >>> my_list = MyList()
       >>> my_list.append("Bro")
       >>> my_list.append("Salma")
       >>> my_list.append("Youn")
       >>> print(my_list)
       ['Bro', 'Salma', 'Youn']

using method:
       >>> my_list.print_sorted()
       ['Bro', 'Salma', 'Youn']

give invalid argument to themethod:
       >>> my_list.print_sorted(3)
       Traceback (most recent call last):
        ...
       TypeError: print_sorted() takes 1 positional argument but 2 were given

use method without ():
       >>> my_list = MyList()
       >>> print(my_list.print_sorted)
       <bound method MyList.print_sorted of []>



